trigger: none

name: $(Build.SourceBranchName)-$(Date:ddMMyy)-$(Rev:rr)

pool:
 vmImage: windows-latest

parameters:
 - name: environment
   displayName: "Select Environment "
   type: string
   default: "Stage"
   values:
    - "Stage"
    - "Production"

stages:
- stage: Building
  displayName: Build
  jobs:
  - job: JobA
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          Write-Host "Hello World"
          
          $configurationTable = @{
              abc = 'buffalorun'
              xyz = 'macusooke'
          	mnc = 'default'
          }
          
          $folders=$(git diff HEAD HEAD~ --name-only  |%{Split-Path $_ -Parent }| %{Split-Path $_ -Leaf})
          
          $jsonObject = @{}
          
          foreach ($folder in $folders) {
              if ($configurationTable.ContainsKey($folder)) {
                  Write-Output "$folder exists in the hashtable with value $($configurationTable[$folder])"
          		$jsonObject[$folder] = @{
                      'conf' = $configurationTable[$folder]
                  }
              } else {
                  Write-Output "$folder does not exist in the hashtable"
              }
          }
          
          
          $jsonContent = $jsonObject | ConvertTo-Json -Depth 100
          
          
          
          Write-Host "##vso[task.setvariable variable=targets;isOutput=true]$jsonContent "
      name: setTargets
    
    - script: echo $(setTargets.targets)
      name: echovar

  - job: buildSrc
    dependsOn: JobA
    displayName: Build source
    strategy:
      matrix: $[ dependencies.JobA.outputs['setTargets.targets'] ]
    variables:
      targets: $[ dependencies.JobA.outputs['setTargets.targets'] ]
    steps:
    - pwsh: Write-Host "$(targets)"
      displayName: 'Print all variables via expression'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          Write-Host "Hello World"
          $jsonObject = ConvertTo-Json "$(targets)"
          $jsonObject
          write-host "$(conf)"
          write-host "$(conf)" > $(Build.ArtifactStagingDirectory)/$(conf).txt

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    